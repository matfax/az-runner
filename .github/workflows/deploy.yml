name: deploy functions

on:
  push:
    branches:
      - main
    paths:
        - '*.ps1'
        - '*.json'
        - '.github/workflows/deploy.yml'
        - 'startup/*'
        - 'test/*'
  workflow_call:
    inputs:
      no-test:
        required: false
        type: boolean
        default: true
  workflow_dispatch:
    inputs:
      no-test:
        required: false
        type: boolean
        default: true

jobs:
  deploy:
    name: deploy functions
    runs-on: windows-latest
    environment: azure-functions
    permissions:
      id-token: write
    concurrency:
      group: functions
      cancel-in-progress: false
    steps:
      - name: checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: install and cache PowerShell modules
        uses: potatoqualitee/psmodulecache@8a705c639dc276dfe651189abf11544c5080d384 # v6.2
        with:
          modules-to-cache: |
            Az:12.1.0,
            Az.Accounts:2.2.3,
            Az.KeyVault:4.7.0
            Az.ContainerInstance:1.0.0

      - name: copy Azure modules into project
        shell: powershell
        run: |
          ./install.ps1 -ModuleName Az
          ./install.ps1 -ModuleName Az.Accounts
          ./install.ps1 -ModuleName Az.KeyVault
          ./install.ps1 -ModuleName Az.ContainerInstance
      
      - name: Login to Azure
        uses: azure/login@6c251865b4e6290e7b78be643ea2d005bc51f69a # v2.1.1
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_426EBB997E104B7BBA2371F9A44EA1FD }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_CA698282E4EE4B108BA0A7094D216875 }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_46D185A5C30E4F0C800067BE25E24C6E }}

      - name: deploy Azure Functions
        uses: Azure/functions-action@fd80521afbba9a2a76a99ba1acc07aff8d733d11 # v1.5.2
        id: fa
        with:
          app-name: ${{ vars.AZ_FUNCTION_APP_NAME }}
          slot-name: 'production'
          package: '.'
  
  test:
    name: invoke webhook
    needs: deploy
    if: inputs.no-test != 'true'
    concurrency:
      group: functions
      cancel-in-progress: false
    runs-on:
      - self-hosted
      - azure
      - production
    steps:
      - name: print output
        run: echo "Test successful"

  check:
    name: check final state
    runs-on: ubuntu-latest
    needs: test
    if: inputs.no-test != 'true'
    steps:
      - name: fail if test runner failed to complete
        if: needs.test.result != 'success'
        run: |
          echo "Test runner was probably cancelled or failed otherwise."
          exit 1
